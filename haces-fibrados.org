#+MACRO: newline @@latex:\\[0.6em]@@ @@html:<br>@@

#+title: Haces fibrados y gráficas de clanes
#+author: Rafael Villarroel Flores, UAEH {{{newline}}}\scriptsize Trabajo conjunto con Paco Larrión y Miguel Pizaña
#+date: \scriptsize XXXI Coloquio Víctor Neumann-Lara {{{newline}}}\tiny 1 de marzo de 2016
#+options: H:2

#+latex_class: beamer-talk
#+startup: beamer
#+beamer_theme: metropolis [numbering=none, block=fill]
#+language: es

#+latex_class_options: [spanish,presentation]
#+latex_header: \usepackage[spanish,mexico,es-noshorthands]{babel}
#+latex_header: \usepackage{tikz}
#+latex_header: \usepackage{tkz-berge}
#+latex_header: \GraphInit[vstyle=Hasse]

#+latex_header: \usepackage{tkz-berge-add}
#+latex_header: \usepackage{pgfplots}
#+latex_header: \usepackage{tikz-cd}

#+beamer_header: \languagepath{spanish}
#+beamer_header: \beamerdefaultoverlayspecification{<+->}

#+latex_header: \newcommand{\setxyz}[1]{% 
#+latex_header:   \pgfmathsetmacro{\xone}{cos(180+#1)}%
#+latex_header:   \pgfmathsetmacro{\yone}{sin(180+#1)}%
#+latex_header:   \pgfmathsetmacro{\xtwo}{cos(360-#1)}%
#+latex_header:   \pgfmathsetmacro{\ytwo}{sin(360-#1)}%
#+latex_header: }

* Gráficas de clanes

** Gráficas

   - Todas nuestras gráficas son *finitas* y *simples* (sin flechas,
     lazos ni aristas múltiples).
   - Denotaremos \(x\sim y\) si \(x,y\) son vértices adyacentes.
   - Si \(x,y\) son vértices de una gráfica, escribiremos \(x\simeq
     y\) si \(x\sim y\) o \(x=y\).
   - Escribimos \(N[x]=\{y\mid y\sim x\}\cup\{x\}\).

** Completas

   Dada una gráfica \(G\), una *completa* es un subconjunto de
   vértices donde cualesquier par de vértices son adyacentes.
   
   #+name: completas
   #+header: :imagemagick yes :iminoptions -density 300 -resize 400
   #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
   #+header: :file (by-backend (latex "completas.tikz") (beamer "completas.tikz") (t "completas.png"))
   #+header: :cache yes
   #+begin_src latex :results raw file
\begin{tikzpicture}[scale=1.2]
  \pgfmathsetmacro{\edgel}{2}
  \pgfmathsetmacro{\rad}{\edgel/sqrt(2)}
  \grHouse[RA=\rad]
  \Edge(a0)(a2)
  \Edge(a1)(a3)
  \only<2>{\AddVertexColor{red}{a0,a2,a3}}
  \only<3>{\AddVertexColor{blue}{a0,a1,a4}}
  \only<4>{\AddVertexColor{green}{a0,a1,a2,a3}}
  \only<5>{\AddVertexColor{magenta}{a2}}
\end{tikzpicture}
   #+end_src
   
   #+attr_html: :width 400 :alt completas :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[4632dca4c5822a6cdddba7e6219508935883cae2]: completas
   [[file:completas.png]]

** Clanes

   Un *clan* de una gráfica es una completa maximal.

   
   #+name: clan
   #+header: :imagemagick yes :iminoptions -density 300 -resize 400
   #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
   #+header: :file (by-backend (latex "clan.tikz") (beamer "clan.tikz") (t "clan.png"))
   #+header: :cache yes
   #+begin_src latex :results raw file
\begin{tikzpicture}[scale=1.2]
  \pgfmathsetmacro{\edgel}{2}
  \pgfmathsetmacro{\rad}{\edgel/sqrt(2)}
  \grHouse[RA=\rad]
  \Edge(a0)(a2)
  \Edge(a1)(a3)
  \only<2>{\AddVertexColor{blue}{a0,a1,a4}}
  \only<3>{\AddVertexColor{red}{a0,a1,a2,a3}}
\end{tikzpicture}
   #+end_src
   
   #+attr_html: :width 400 :alt clan :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[d436a6c5350ea3fd265f594d36adf5b952526778]: clan
   [[file:clan.png]]

** Gráfica de clanes

   Dada una gráfica \(G\), su *gráfica de clanes \(K(G)\)* es la gráfica
   de intersección de la colección de clanes de \(G\). Es decir:

   - \(V\big(K(G)\big)=\{Q\subseteq V(G)\mid Q \text{ es clan de } G\}\),
   - \(E\big(K(G)\big)=\{\{Q_{1},Q_{2}\}\mid Q_{1}\cap Q_{2}\ne\emptyset\}\).

** Ejemplo

   #+name: graficadeclanes
   #+header: :imagemagick yes :iminoptions -density 300 -resize 400
   #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
   #+header: :file (by-backend (latex "graficadeclanes.tikz") (beamer "graficadeclanes.tikz") (t "graficadeclanes.png"))
   #+header: :cache yes
   #+begin_src latex :results raw file
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}
  \pgfmathsetmacro{\edgel}{1.8}
  \pgfmathsetmacro{\rad}{\edgel/sqrt(2)}
  \grHouse[RA=\rad]
  \Edge(a0)(a2)
  \Edge(a1)(a3)   
  \uncover<2>{\AddVertexColor{blue}{a0,a1,a4}}
  \uncover<3>{\AddVertexColor{red}{a0,a1,a2,a3}}
  \graphcaption{0}{-0.9*\edgel}{$G$}
  \uncover<4->{%
    \grPath[RA=\edgel,form=2,rotation=90,x=4,y=\edgel/2]{2}
    \AddVertexColor{red}{a0}
    \AddVertexColor{blue}{a1}
    \graphcaption{4}{-0.9*\edgel}{$K(G)$}
  }
\end{tikzpicture}
     #+end_src
   
   #+attr_html: :width 400 :alt graficadeclanes :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[b97b3924323d611d3f7766852f97760ca2a2e353]: graficadeclanes
   [[file:graficadeclanes.png]]

** Gráficas iteradas de clanes

   La sucesión de *gráficas iteradas de clanes* se define como:
   \begin{displaymath}
   K^{0}(G)=G,\qquad K^{n}(G)=K\big(K^{n-1}(G)\big),\quad n\geq1.
   \end{displaymath}

   #+beamer: \pause
   
   #+name: iteradas
   #+header: :imagemagick yes :iminoptions -density 300 -resize 400
   #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
   #+header: :file (by-backend (latex "iteradas.tikz") (beamer "iteradas.tikz") (t "iteradas.png"))
   #+header: :cache yes
   #+begin_src latex :results raw file
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}
  \pgfmathsetmacro{\edgel}{1.8}
  \pgfmathsetmacro{\rad}{\edgel/sqrt(2)}
  \grHouse[RA=\rad]
  \Edge(a0)(a2)
  \Edge(a1)(a3)   
  \graphcaption{0}{-0.9*\edgel}{$G$}
  \uncover<3->{%
    \grPath[RA=\edgel,form=2,rotation=90,x=3,y=\edgel/2]{2}
    \graphcaption{3}{-0.9*\edgel}{$K(G)$}
  }
  \uncover<4->{%
    \Vertex[x=6,y=\edgel/2]{x}
    \graphcaption{6}{-0.9*\edgel}{$K^{2}(G)$}
  }
\end{tikzpicture}
   #+end_src
   
   #+attr_html: :width 400 :alt iteradas :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[86e42053ca0ae070bec67ba9a606c2e1b4a978c5]: iteradas
   [[file:iteradas.png]]

** Comportamiento

   - Hay algunas gráficas para las que la sucesión de órdenes de las
     gráficas iteradas de clanes tiende a infinito. Tales gráficas se
     llaman *divergentes*. Las otras se llaman *convergentes*. La
     gráfica divergente más pequeña es la gráfica del octaedro.
   
     \pause

     #+name: octaedro3d
     #+header: :imagemagick yes :iminoptions -density 300 -resize 400
     #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
     #+header: :file (by-backend (latex "octaedro3d.tikz") (beamer "octaedro3d.tikz") (t "octaedro3d.png"))
     #+header: :cache yes
     #+begin_src latex :results raw file
     \setxyzvec[17]
     \begin{tikzpicture}[scale=0.8]%
      [x = {(\xone cm,\yone cm)}, y = {(\xtwo cm,\ytwo cm)}, z =
      {(0cm,1cm)}]
      \begin{scope}[canvas is xy plane at z=0]
        \grEmptyCycle[RA=2,prefix=a,rotation=35]{4}
      \end{scope}
      \begin{scope}[canvas is xy plane at z=-2.5]
        \Vertex{x}
      \end{scope}
      \begin{scope}[canvas is xy plane at z=2.5]
        \Vertex{y}
      \end{scope}
      \EdgeFromOneToAll{x}{a}{}{4}
      \EdgeInGraphLoop{a}{4}
      \EdgeFromOneToAll{y}{a}{}{4}
       \end{tikzpicture}
     #+end_src
     
     #+attr_html: :width 400 :alt octaedro3d :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[17cb5310e532e58dedce017d17340f7271f1f06e]: octaedro3d
     [[file:octaedro3d.png]]

** Iteradas del octaedro
     #+name: iteradasoctaedro
     #+header: :imagemagick yes :iminoptions -density 300 -resize 400
     #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
     #+header: :file (by-backend (latex "iteradasoctaedro.tikz") (beamer "iteradasoctaedro.tikz") (t "iteradasoctaedro.png"))
     #+header: :cache yes
     #+begin_src latex :results raw file
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}
  \grOctahedron[RA=1]{3}
  \graphcaption{0}{-1.6}{$G=O_{3}$}

  \uncover<2->{%
    \begin{scope}[xshift=3cm]
      \grOctahedron[RA=1.2]{4}
    \end{scope}
    \graphcaption{3}{-2.0}{$K(G)=O_{4}$}
  }
  \uncover<3->{%
    \begin{scope}[xshift=7.3cm]
      \grOctahedron[RA=2.3]{8}
    \end{scope}
    \graphcaption{7.3}{-3.2}{$K^{2}(G)=O_{8}$}
  }
\end{tikzpicture}
     #+end_src
     
     #+attr_html: :width 400 :alt iteradasoctaedro :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[bbb6917dde995f022ed588a5dcb3940432b49d8e]: iteradasoctaedro
     [[file:iteradasoctaedro.png]]

** Iteradas del octaedro

    - \(|K^{3}(G)|=256\),
    - \(|K^{4}(G)|=2^{128}\), etc
    - En general, si \(O_{n}=\overline{nK_{2}}\), \(K(O_{n})=O_{2^{n-1}}\), (Neumann-Lara, 1976)

** Comportamiento
     
   - No se conoce un método general para determinar el
     *comportamiento* de una gráfica.
   - La gráfica más pequeña del que no se conoce el comportamiento es
     el *disfenoide chato*.

*** Disfenoide chato					     :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.4
    :END:
    
    #+attr_latex: :float t :width 4cm
    [[file:snub.png]]

    
*** Iteradas del disfenoide				     :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.4
    :END:
    
    | \(n\) | vértices en      \(K^{n}(G)\) |
    |-------+-------------------------------|
    |     0 |                             8 |
    |     1 |                            12 |
    |     2 |                            20 |
    |     3 |                            56 |
    |     4 |                          1076 |
    |     5 |            \(>7,370,000,000\) |

** Haces fibrados

   - En el estudio del operador de clanes, ha sido útil asociarle un
     espacio topológico \(|G|\) a cada gráfica \(G\) por medio del
     *complejo simplicial de completas*
     \begin{displaymath}
     \Delta(G)=\{C\subseteq V(G)\mid C\text{ es completa}\}.
     \end{displaymath}

   - En esta plática trataremos el concepto de *haces fibrados* el
     cual es una generalización tanto del *producto* como de las
     *funciones cubrientes*.


* Productos

** Producto fuerte

   Dadas dos gráficas \(G,H\), el *producto* \(G\boxtimes H\) se
   define como:

   - \(V(G\boxtimes H)=V(G)\times V(H)\),
   - \(E(G\boxtimes H)=\{\{(g,h),(g',h')\}\mid g\simeq g',h\simeq
     h'\}\).
     
** Ejemplo

     #+name: producto
     #+header: :imagemagick yes :iminoptions -density 300 -resize 400
     #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
     #+header: :file (by-backend (latex "producto.tikz") (beamer "producto.tikz") (t "producto.png"))
     #+header: :cache yes
     #+begin_src latex :results raw file
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}[scale=1.6]
  \grPath[form=2,rotation=90,x=-1,y=1,RA=1]{3}
  \graphcaption{-1.5}{1}{$P_{3}$}
  \grPath[form=2,x=1.5,y=-1,RA=1]{4}
  \graphcaption{1.5}{-1.5}{$P_{4}$}
  \grCompletedGrid[RA=1,RB=1]{4}{3}
  \graphcaption{1.5}{2.5}{$P_{4}\boxtimes P_{3}$}
\end{tikzpicture}
     #+end_src
     
     #+attr_html: :width 400 :alt producto :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[b309964f1e4e9436987aaff3b4d1de71521d6cc4]: producto
     [[file:producto.png]]

** 

*** Neumann-Lara, 1976						  :B_theorem:
    :PROPERTIES:
    :BEAMER_env: theorem
    :END:
    Para cualesquiera gráficas \(G,H\) se tiene que:
    \begin{displaymath}
    K(G\boxtimes H)\cong K(G)\boxtimes K(H).
    \end{displaymath}

*** Corolarios						     :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.45
    :END:

**** 								:B_corollary:
     :PROPERTIES:
     :BEAMER_env: corollary
     :END:
     \(G\boxtimes H\) es convergente si y solo si ambas \(G\), \(H\)
     son convergentes.

**** 								:B_corollary:
     :PROPERTIES:
     :BEAMER_env: corollary
     :END:

     Si \(G,H\) son *autóclanas* (i.e. \(K(G)\cong G\)), entonces
     \(G\boxtimes H\) es autóclana.

*** Corolario 						     :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.45
    :END:
**** 								:B_corollary:
     :PROPERTIES:
     :BEAMER_env: corollary
     :END:

     Si \(G\) tiene *periodo 2* (i.e. \(K^{2}(G)\cong G\)), entonces
     \[G\boxtimes K(G)\] es autóclana.


** Topología del producto

*** Larrión, Pizaña, V., 2013 					  :B_theorem:
    :PROPERTIES:
    :BEAMER_env: theorem
    :END:
    Para todas las gráficas \(G,H\), se tiene que
    \begin{displaymath}
    |G_{1}\boxtimes G_{2}|\simeq |G_1|\times |G_2|.
    \end{displaymath}


* Cubrientes

** Cubrientes topológicos

   - Si \(\tilde{X}\), \(X\) son espacios topológicos, se dice que una
     función continua y suprayectiva \(f\colon \tilde{X}\to X\) es una
     *función cubriente* si todo \(x\in X\) tiene una vecindad \(U\) tal
     que:
     \begin{displaymath}
     p^{-1}(U)=\cup V_{\alpha}
     \end{displaymath}
     donde la unión de la derecha es disjunta, y cada \(V_{\alpha}\)
     es un abierto, tal que \(p\vert\colon V_{\alpha}\to U\) es un
     homeomorfismo.
   - Una propiedad importante que tienen los cubrientes es la
     *propiedad de levantamiento de caminos*: dado un camino
     \(\gamma\colon [0,1]\to X\) con \(\gamma(0)=x_{0}\in X\) y un
     punto \(\tilde{x}_{0}\in \tilde{X}\) tal que
     \(p(\tilde{x}_{0})=x_{0}\), existe un único camino
     \(\tilde{\gamma}\colon [0,1]\to \tilde{X}\) tal que
     \(p(\tilde{\gamma})=\gamma\).

** 
*** Ejemplo							      :BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.45
    :END:

**** 							    :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

   #+name: cubrientetop
   #+header: :imagemagick yes :iminoptions -density 300 -resize 400
   #+header: :packages '(("" "tikz-cd")) :border 1pt
   #+header: :file (by-backend (latex "cubrientetop.tikz") (beamer "cubrientetop.tikz") (t "cubrientetop.png"))
   #+header: :cache yes
   #+begin_src latex :results raw file
   \begin{tikzcd}
   & \tilde{X}\arrow[d,"p"]\\
   I\arrow[r,"\gamma"] & X
   \end{tikzcd}
   #+end_src

   #+attr_html: :width 400 :alt cubrientetop :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[e7398f797fea68875105799208f42ea5c48a32c4]: cubrientetop
   [[file:cubrientetop.png]]

#+beamer: \pause

**** 							    :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

    #+name: cubrientetop2
    #+header: :imagemagick yes :iminoptions -density 300 -resize 400
    #+header: :packages '(("" "tikz-cd")) :border 1pt
    #+header: :file (by-backend (latex "cubrientetop2.tikz") (beamer "cubrientetop2.tikz") (t "cubrientetop2.png"))
    #+header: :cache yes
    #+begin_src latex :results raw file 
   \begin{tikzcd}
        & \tilde{X}\arrow[d,"p"] & \\
   I\arrow[r,"\gamma"] & X & \\[-5mm]
   0\arrow[rr,mapsto] &  & x_0 \\
   \end{tikzcd}
    #+end_src
    
    #+attr_html: :width 400 :alt cubrientetop2 :align center
    #+attr_latex: :float t :width ""
    #+RESULTS[702d1e1df5b636af89389f92d7978845b7aa56fc]: cubrientetop2
    [[file:cubrientetop2.png]]

#+beamer: \pause

*** Ejemplo						     :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.45
    :END:

**** 							    :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

     
     #+name: cubrientetop3
     #+header: :imagemagick yes :iminoptions -density 300 -resize 400
     #+header: :packages '(("" "tikz-cd")) :border 1pt
     #+header: :file (by-backend (latex "cubrientetop3.tikz") (beamer "cubrientetop3.tikz") (t "cubrientetop3.png"))
     #+header: :cache yes
     #+begin_src latex :results raw file 
\begin{tikzcd}
     & \tilde{X}\arrow[d,"p"] & \tilde{x}_0\arrow[dd,mapsto]\\
I\arrow[r,"\gamma"] & X & \\[-5mm]
0\arrow[rr,mapsto] &  & x_0 \\
\end{tikzcd}
     #+end_src
     
     #+attr_html: :width 400 :alt cubrientetop3 :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[d286abeac7cf9c56bdd339617f8ed767d6a9141c]: cubrientetop3
     [[file:cubrientetop3.png]]

#+beamer: \pause

**** 							    :B_ignoreheading:
     :PROPERTIES:
     :BEAMER_env: ignoreheading
     :END:

     
     #+name: cubrientetop4
     #+header: :imagemagick yes :iminoptions -density 300 -resize 400
     #+header: :packages '(("" "tikz-cd")) :border 1pt
     #+header: :file (by-backend (latex "cubrientetop4.tikz") (beamer "cubrientetop4.tikz") (t "cubrientetop4.png"))
     #+header: :cache yes
     #+begin_src latex :results raw file 
\begin{tikzcd}
     & \tilde{X}\arrow[d,"p"] & \tilde{x}_0\arrow[dd,mapsto]\\
I\arrow[r,"\gamma"]\arrow[ru,dashed,"\tilde{\gamma}"] & X & \\[-5mm]
0\arrow[rr,mapsto] &  & x_0 \\
\end{tikzcd}
     #+end_src
     
     #+attr_html: :width 400 :alt cubrientetop4 :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[b0aad56b024a2f8023304eb1176fdd7a5c401241]: cubrientetop4
     [[file:cubrientetop4.png]]


** Morfismos

   Dadas dos gráficas \(G,H\), un *morfismo* \(f\colon G\to H\) es una
   función \(f\colon V(G)\to V(H)\) tal que \(x\simeq y\) implica
   \(f(x)\simeq f(y)\).

** Ejemplo
   
   #+name: ejemplocubriente
   #+header: :imagemagick yes :iminoptions -density 300 -resize 400
   #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
   #+header: :file (by-backend (latex "ejemplocubriente.tikz") (beamer "ejemplocubriente.tikz") (t "ejemplocubriente.png"))
   #+header: :cache yes
   #+begin_src latex :results raw file
\setxyzvec[17]
\begin{tikzpicture}[scale=0.5]%
  [x = {(\xone cm,\yone cm)}, y = {(\xtwo cm,\ytwo cm)}, z =
  {(0cm,1cm)}]
  \draw[style={->},very thick] (0,0,3) -- (0,0,2);
  \begin{scope}[canvas is xy plane at z=0]
    \grCycle[RA=2.5,prefix=a,rotation=35]{4}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=5]
    \grEmptyCycle[RA=2.5,prefix=b,rotation=35]{4}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=7.5]
    \grEmptyCycle[RA=2.5,prefix=c,rotation=35]{4}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=10]
    \grEmptyCycle[RA=2.5,prefix=d,rotation=35]{4}
  \end{scope}
  \Edges(b0,b1,b2,b3,c0,c1,c2,c3,d0,d1,d2,d3)
  \only<1-7>{%
  \begin{scope}[canvas is xy plane at z=3]
    \node (x) at (1.5,-1){};
  \end{scope}
  \draw[thick] (b0) -- (x);
  \begin{scope}[canvas is xy plane at z=12]
    \node (y) at (1,0){};
  \end{scope}
  \draw[thick] (d3) -- (y);}
  \only<8>{\Edges(b0,d3)}
  \only<2,7>{\AddVertexColor{red}{a0,b0,c0,d0}}
  \only<3,6,7>{\AddVertexColor{blue}{a1,b1,c1,d1}}
  \only<4,7>{\AddVertexColor{green}{a2,b2,c2,d2}}
  \only<5>{\AddVertexColor{orange}{a3,b3,c3,d3}}
\end{tikzpicture}
   #+end_src
   
   #+attr_html: :width 400 :alt ejemplocubriente :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[e013234eaa2e9343a02c73624a1279dc6d6055b6]: ejemplocubriente
   [[file:ejemplocubriente.png]]

** Cubrientes

*** Morfismo cubriente 					       :B_definition:
    :PROPERTIES:
    :BEAMER_env: definition
    :END:
    Dado un morfismo de gráficas \(p\colon \tilde{G}\to G\), decimos
    que \(p\) es un *morfismo cubriente* si satisface la *propiedad
    del levantamiento único*, es decir:

    \pause
    #+BEGIN_QUOTE
    para todo camino \(\gamma=(v_{0},v_{1},\ldots,v_{n})\) en \(G\), y
    vértice \(\tilde{v}_{0}\in p^{-1}(v_{0})\), tal que
    \(p(\tilde{v}_{0})=v_{0}\), existe un único camino
    \(\tilde{\gamma}=(\tilde{v}_{0},\tilde{v}_{1},\ldots,\tilde{v}_{n})\)
    tal que \(p(\tilde{\gamma})=\gamma\).
    #+END_QUOTE

** Ejemplo de cubriente

   #+name: cubrientecamino
   #+header: :imagemagick yes :iminoptions -density 300 -resize 400
   #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
   #+header: :file (by-backend (latex "cubrientecamino.tikz") (beamer "cubrientecamino.tikz") (t "cubrientecamino.png"))
   #+header: :cache yes
   #+begin_src latex :results raw file
\setxyzvec[17]
\begin{tikzpicture}[scale=0.5]%
  [x = {(\xone cm,\yone cm)}, y = {(\xtwo cm,\ytwo cm)}, z = {(0cm,1cm)}]
  \draw[style={->},very thick] (0,0,3) -- (0,0,2);
  \begin{scope}[canvas is xy plane at z=0]
    \grCycle[RA=2.5,prefix=a,rotation=35]{4}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=5]
    \grEmptyCycle[RA=2.5,prefix=b,rotation=35]{4}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=7.5]
    \grEmptyCycle[RA=2.5,prefix=c,rotation=35]{4}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=10]
    \grEmptyCycle[RA=2.5,prefix=d,rotation=35]{4}
  \end{scope}
  \Edges(b0,b1,b2,b3,c0,c1,c2,c3,d0,d1,d2,d3)
  \Edges(b0,d3)
  \only<2-4>{\AddVertexColor{red}{a1,a2}}
  \only<2-4>{\AddVertexColor{blue}{a0}}
  \only<3,4>{\AddVertexColor{blue}{b0}}
  \only<4>{\AddVertexColor{red}{b1,b2}}
  \only<5-7>{\AddVertexColor{blue}{a3}}
  \only<5-7>{\AddVertexColor{orange}{a0,a1}}
  \only<6,7>{\AddVertexColor{blue}{d3}}
  \only<7>{\AddVertexColor{orange}{b0,b1}}
\end{tikzpicture}
   #+end_src

   #+attr_html: :width 400 :alt cubrientecamino :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[95c2f7eee7f4964a83535a7c121dce7f2f3b9d53]: cubrientecamino
   [[file:cubrientecamino.png]]

** Propiedades de cubrientes

*** Fibra						       :B_definition:
    :PROPERTIES:
    :BEAMER_env: definition
    :END:
    Si \(p\colon \tilde{G}\to G\) es cubriente, se puede demostrar que
    la cantidad de elementos en cada fibra \(p^{-1}(v)\) es
    independiente de \(v\in G\).

*** Hojas
    Si en un cubriente \(p\colon \tilde{G}\to G\) cada fibra tiene
    \(n\) elementos, decimos que el cubriente es *\(n\) a 1*.

** 

*** Isomorfismos locales 					  :B_theorem:
    :PROPERTIES:
    :BEAMER_env: theorem
    :END:
    Dado un morfismo cubriente de gráficas \(p\colon \tilde{G}\to G\),
    los siguientes enunciados son equivalentes:

    - Dados un triángulo \(T=(u,v,w)\) en \(G\) y un vértice
      \(\tilde{u}\in \tilde{G}\) tal que \(p(\tilde{u})=u\), existe un
      triángulo \(\tilde{T}=(\tilde{u},\tilde{v},\tilde{w})\) en
      \(\tilde{G}\) que es un *levantamiento* de T.
    - \(p\) es un *isomorfismo local*, es decir, para cada
      \(\tilde{v}\in \tilde{G}\), la restricción de \(p\) a
      \(N[\tilde{v}]\to N[p(\tilde{v})]\) es un isomorfismo de
      gráficas.

*** Cubriente triangular 				       :B_definition:
    :PROPERTIES:
    :BEAMER_env: definition
    :END:
    En tal caso, \(p\colon \tilde{G}\to G\) se llama un *cubriente
    triangular*.

** Cubrientes triangulares y clanes

*** Larrión, Neumann-Lara, 2000					  :B_theorem:
    :PROPERTIES:
    :BEAMER_env: theorem
    :END:
    Si \(p\colon \tilde{G}\to G\) es un cubriente triangular, entonces
    para todo clan \(\tilde{Q}\) de \(\tilde{G}\) se tiene que
    \(p(\tilde{Q})\) es un clan, y se induce un morfismo
    \begin{displaymath}
    K(p)\colon K(\tilde{G})\to K(G),
    \end{displaymath}
    que además es un cubriente triangular, con la misma cantidad de
    hojas que \(p\).

*** 								:B_corollary:
    :PROPERTIES:
    :BEAMER_env: corollary
    :END:
    Si \(p\colon \tilde{G}\to G\) es un cubriente triangular,
    \(\tilde{G}\) es divergente si y solo si \(G\) es divergente.

** Otras propiedades

   Si \(p\colon \tilde{G}\to G\) es un cubriente, para toda completa
   \(C\) de \(G\) se tiene que \(p^{-1}(C)\) se puede escribir como
   unión disjunta de subgráficas completas de \(\tilde{G}\) ajenas.

** Ejemplo

   - Existen exactamente 3 gráficas *localmente Petersen* (Hall,
     1980). Las 3 son *distancia-regulares*:
     - \(\overline{L(K_{7})}\), con 21 vértices,
     - una de 63 vértices,
     - otra de 65 vértices.
   - La de 63 vértices es un cubriente 3 a 1 de \(\overline{L(K_{7})}\).


* Fibraciones

** Definición de haz fibrado topológico

*** Haz fibrado						       :B_definition:
    :PROPERTIES:
    :BEAMER_env: definition
    :END:

    Sean \(F,E,B\) espacios topológicos. Decimos que la función
    continua y suprayectiva \(p\colon E\to B\) es un *haz fibrado con
    fibra \(F\)* si todo punto de \(B\) tiene una vecindad \(U\) tal
    que \(p^{-1}(U)\) es homeomorfo a \(U\times F\) por medio de un
    homeomorfismo \(\alpha_{U}\) tal que el diagrama conmuta:

    
    #+name: hazdiagrama
    #+header: :imagemagick yes :iminoptions -density 300 -resize 400
    #+header: :packages '(("" "tikz-cd")) :border 1pt
    #+header: :file (by-backend (latex "hazdiagrama.tikz") (beamer "hazdiagrama.tikz") (t "hazdiagrama.png"))
    #+header: :cache yes
    #+begin_src latex :results raw file 
\begin{tikzcd}
p^{-1}(U)\arrow[rd,"p\vert"]\arrow[rr,"\alpha_{U}"] &   & U\times F\arrow[ld,"\pi_U"]\\
                & U &
\end{tikzcd}
    #+end_src
    
    #+attr_html: :width 400 :alt hazdiagrama :align center
    #+attr_latex: :float t :width ""
    #+RESULTS[17621232d54b9350324500bbed912d90582b0ac5]: hazdiagrama
    [[file:hazdiagrama.png]]
** Banda de Möbius

#+name: mobius
#+header: :imagemagick yes :iminoptions -density 300 -resize 400
#+header: :packages '(("" "tikz") ("" "pgfplots")) :border 1pt
#+header: :file (by-backend (latex "mobius.tikz") (beamer "mobius.tikz") (t "mobius.png"))
#+header: :cache yes
#+begin_src latex :results raw file
\begin{tikzpicture}[scale=1.3]
  \begin{axis}[
    hide axis,
    view = {40}{40}
  ]
  \addplot3 [
    surf,
    colormap/greenyellow,
    shader     = faceted interp,
    point meta = x,
    samples    = 40,
    samples y  = 5,
    z buffer   = sort,
    domain     = 0:360,
    y domain   =-0.5:0.5
  ] (
    {(1+0.5*y*cos(x/2)))*cos(x)},
    {(1+0.5*y*cos(x/2)))*sin(x)},
    {0.5*y*sin(x/2)}
  );

  \addplot3 [
    samples=50,
    domain=-145:180, % The domain needs to be adjusted manually,
                     % depending on the camera angle, unfortunately
    samples y=0,
    thick
  ] (
    {cos(x)},
    {sin(x)},
    {0}
  );
  \only<2>{%
  \addplot3 [
    surf,
    blue,
    shader     = faceted interp,
    point meta = x,
    samples    = 40,
    samples y  = 5,
    z buffer   = sort,
    domain     = -60:-30,
    y domain   =-0.5:0.5
  ] (
    {(1+0.5*y*cos(x/2)))*cos(x)},
    {(1+0.5*y*cos(x/2)))*sin(x)},
    {0.5*y*sin(x/2)}
  )};
  \only<3>{%
  \addplot3 [
    surf,
    blue,
    shader     = faceted interp,
    point meta = x,
    samples    = 40,
    samples y  = 5,
    z buffer   = sort,
    domain     = -30:0,
    y domain   =-0.5:0.5
  ] (
    {(1+0.5*y*cos(x/2)))*cos(x)},
    {(1+0.5*y*cos(x/2)))*sin(x)},
    {0.5*y*sin(x/2)}
  )};
  \only<4>{%
  \addplot3 [
    surf,
    blue,
    shader     = faceted interp,
    point meta = x,
    samples    = 40,
    samples y  = 5,
    z buffer   = sort,
    domain     = 0:30,
    y domain   =-0.5:0.5
  ] (
    {(1+0.5*y*cos(x/2)))*cos(x)},
    {(1+0.5*y*cos(x/2)))*sin(x)},
    {0.5*y*sin(x/2)}
  )};
  \only<5>{%
  \addplot3 [
    surf,
    blue,
    shader     = faceted interp,
    point meta = x,
    samples    = 40,
    samples y  = 5,
    z buffer   = sort,
    domain     = 30:60,
    y domain   =-0.5:0.5
  ] (
    {(1+0.5*y*cos(x/2)))*cos(x)},
    {(1+0.5*y*cos(x/2)))*sin(x)},
    {0.5*y*sin(x/2)}
  )};
  \only<6>{%
  \addplot3 [
    surf,
    blue,
    shader     = faceted interp,
    point meta = x,
    samples    = 40,
    samples y  = 5,
    z buffer   = sort,
    domain     = 60:90,
    y domain   =-0.5:0.5
  ] (
    {(1+0.5*y*cos(x/2)))*cos(x)},
    {(1+0.5*y*cos(x/2)))*sin(x)},
    {0.5*y*sin(x/2)}
  )};
  \only<7>{%
  \addplot3 [
    surf,
    blue,
    shader     = faceted interp,
    point meta = x,
    samples    = 40,
    samples y  = 5,
    z buffer   = sort,
    domain     = 90:120,
    y domain   =-0.5:0.5
  ] (
    {(1+0.5*y*cos(x/2)))*cos(x)},
    {(1+0.5*y*cos(x/2)))*sin(x)},
    {0.5*y*sin(x/2)}
  )};
  \end{axis}    
  % \draw[style={->},very thick,green] (3.14,1,0) -- (3.14,0,0);
\end{tikzpicture}
#+end_src

#+attr_html: :width 400 :alt mobius :align center
#+attr_latex: :float t :width ""
#+RESULTS[8eec76def21e59e075f305e8026b0aad5bd8f393]: mobius
[[file:mobius.png]]

** Proyecciones

*** Proyección 						       :B_definition:
    :PROPERTIES:
    :BEAMER_env: definition
    :END:
    Sean \(F,E,B\) gráficas con \(p\colon E\to B\) un morfismo
    suprayectivo en vértices y aristas. Decimos entonces que \(p\) es
    una *proyección*. 

*** Subgráfica trivial					       :B_definition:
    :PROPERTIES:
    :BEAMER_env: definition
    :END:
    Dada \(p\), decimos que la subgráfica \(S\) de \(B\) es
    *\((p,F)\)-trivial* si existe \(\phi_{S}\colon p^{-1}(S)\to
    S\boxtimes F\) isomorfismo de gráficas de tal modo que el diagrama
    conmute:
    
    #+name: subgraficatrivial
    #+header: :imagemagick yes :iminoptions -density 300 -resize 400
    #+header: :packages '(("" "tikz-cd")) :border 1pt
    #+header: :file (by-backend (latex "subgraficatrivial.tikz") (beamer "subgraficatrivial.tikz") (t "subgraficatrivial.png"))
    #+header: :cache yes
    #+begin_src latex :results raw file 
\begin{tikzcd}
p^{-1}(S)\arrow[rd,"p\vert"]\arrow[rr,"\alpha_{S}"] &   & S\times F\arrow[ld,"\pi_S"]\\
                & S &
\end{tikzcd}
    #+end_src
    
    #+attr_html: :width 400 :alt subgraficatrivial :align center
    #+attr_latex: :float t :width ""
    #+RESULTS[5b20f7ec55a7d1cde6f253babd878cb727ed8cec]: subgraficatrivial
    [[file:subgraficatrivial.png]]




** Haz fibrado en gráficas

*** Haz fibrado fuerte
    La proyección \(p\colon E\to B\) es un *haz fibrado fuerte* si
    cada vértice y artista de \(B\) es \((p,F)\) trivial.

** Ejemplos

*** Todo producto es un haz fibrado
   
   #+name: producto2
   #+header: :imagemagick yes :iminoptions -density 300 -resize 400
   #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
   #+header: :file (by-backend (latex "producto2.tikz") (beamer "producto2.tikz") (t "producto2.png"))
   #+header: :cache yes
   #+begin_src latex :results raw file
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}[scale=1.2]
  \grPath[form=2,rotation=90,x=-1,y=1,RA=1]{3}
  \graphcaption{-1.5}{1}{$P_{3}$}
  \grPath[form=2,x=1.5,y=-1,RA=1,prefix=b]{4}
  \graphcaption{1.5}{-1.5}{$P_{4}$}
  \grCompletedGrid[RA=1,RB=1]{4}{3}
  \graphcaption{1.5}{2.5}{$P_{4}\boxtimes P_{3}$}
  \only<2,3>{\draw[->,very thick] (1.5,-0.3)-- (1.5,-0.8);}
  \only<2>{\AddVertexColor{blue}{b0,a0;0,a0;1,a0;2}}
  \only<3>{\AddVertexColor{green}{b0,b1,a0;0,a0;1,a0;2,a1;0,a1;1,a1;2}}
  \only<4>{\draw[->,very thick] (-0.4,1)-- (-0.7,1);
  \AddVertexColor{red}{a0,a0;0,a1;0,a2;0,a3;0}
  }
\end{tikzpicture}
   #+end_src
   
   #+attr_html: :width 400 :alt producto2 :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[c446ef62590115bb7bd36f03fa481f21e6392875]: producto2
   [[file:producto2.png]]





** Ejemplos

*** Todo cubriente es un haz fibrado
    
    #+name: cubrienteesfibrado
    #+header: :imagemagick yes :iminoptions -density 300 -resize 400
    #+header: :packages '(("" "tikz") ("" "tkz-berge") ("" "tkz-berge-add")) :border 1pt
    #+header: :file (by-backend (latex "cubrienteesfibrado.tikz") (beamer "cubrienteesfibrado.tikz") (t "cubrienteesfibrado.png"))
    #+header: :cache yes
    #+begin_src latex :results raw file
\setxyzvec[17]
\begin{tikzpicture}[scale=0.5]%
  [x = {(\xone cm,\yone cm)}, y = {(\xtwo cm,\ytwo cm)}, z = {(0cm,1cm)}]
  \draw[style={->},very thick] (0,0,3) -- (0,0,2);
  \begin{scope}[canvas is xy plane at z=0]
    \grCycle[RA=2.5,prefix=a,rotation=35]{4}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=5]
    \grEmptyCycle[RA=2.5,prefix=b,rotation=35]{4}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=7.5]
    \grEmptyCycle[RA=2.5,prefix=c,rotation=35]{4}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=10]
    \grEmptyCycle[RA=2.5,prefix=d,rotation=35]{4}
  \end{scope}
  \Edges(b0,b1,b2,b3,c0,c1,c2,c3,d0,d1,d2,d3)
  \Edges(b0,d3)
  \only<2>{\AddVertexColor{red}{a0,b0,c0,d0}}
  \only<3>{\AddVertexColor{blue}{a0,b0,c0,d0,a1,b1,c1,d1}}
\end{tikzpicture}
    #+end_src
    
    #+attr_html: :width 400 :alt cubrienteesfibrado :align center
    #+attr_latex: :float t :width ""
    #+RESULTS[d1e3a60d2eb1e0c07b52cf4eaffce27f81317a7a]: cubrienteesfibrado
    [[file:cubrienteesfibrado.png]]

** Haces fibrados y clanes

*** Haz fibrado triangular 				       :B_definition:
    :PROPERTIES:
    :BEAMER_env: definition
    :END:
    El haz fibrado fuerte \(p\colon E\to B\) es un *haz fibrado
    triangular* si cada triángulo de \(B\) es \((p,F)\) trivial.

*** Larrión, Pizaña, V., 2015
    Si \(p\colon E\to B\) es un haz fibrado triangular con fibra
    \(B\), se induce un haz fibrado triangular
    \begin{displaymath}
    K(p)\colon K(E)\to K(B), 
    \end{displaymath}
    con fibra \(K(F)\).

** 

   #+BEGIN_CENTER
   #+BEGIN_huge
   GRACIAS
   #+END_huge
   #+END_CENTER

* COMMENT Local Variables

# Local Variables:
# eval: (set-input-method "spanish-prefix")  
# org-beamer-outline-frame-title: "Contenido"
# org-latex-image-default-width: "3cm"
# org-confirm-babel-evaluate: nil
# End:
